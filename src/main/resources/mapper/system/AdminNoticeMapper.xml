<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lee.mht.system.dao.AdminNoticeDao">
    <cache type="com.lee.mht.system.config.MybatisRedisCache"/>
    <resultMap id="baseResultMap" type="com.lee.mht.system.entity.AdminNotice">
        <id column="id" property="id"/>
        <result column="title" property="title" javaType="string"/>
        <result column="content" property="content" javaType="string"/>
        <result column="available" property="available" javaType="Boolean"/>
        <result column="type" property="type" javaType="string"/>
        <result column="publish_time" property="publishTime" jdbcType="TIMESTAMP"/>
        <result column="createtime" property="createtime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <association property="author" column="author_id"
                     select="com.lee.mht.system.dao.AdminUserDao.getBasicUserInfoById"/>
    </resultMap>
    <resultMap id="noticeVoMap" type="com.lee.mht.system.vo.NoticeVo">
        <id column="id" property="id"/>
        <result column="title" property="title" javaType="string"/>
        <result column="content" property="content" javaType="string"/>
        <result column="publish_time" property="publishTime" jdbcType="TIMESTAMP"/>
        <result column="status" property="status" javaType="Integer"/>
        <association property="author" column="author_id"
                     select="com.lee.mht.system.dao.AdminUserDao.getBasicUserInfoById"/>
    </resultMap>
    <select id="getAllNotice" resultMap="baseResultMap">
        SELECT n.id, n.title, n.content, n.publish_time, n.update_time,n.createtime, n.available, n.type, n.author_id
        FROM notice as n
        LEFT JOIN admin_user as u
        ON n.author_id = u.id
        <where>
            <if test="title != null and ! &quot;&quot;.equals(title)">
                <bind name="myTitle" value="'%' + (title)  + '%'"/>
                n.title like #{myTitle}
            </if>
            <if test="type != null and ! &quot;&quot;.equals(type)">
                AND n.type = #{type}
            </if>
            <if test="publishBeginTime != null and publishEndTime != null">
                AND n.publish_time &gt;= #{publishBeginTime} AND n.publish_time &lt;= #{publishEndTime}
            </if>
            <if test="(publishBeginTime == null ) and publishEndTime != null ">
                AND n.publish_time &lt;= #{publishEndTime}
            </if>
            <if test="publishBeginTime != null and publishEndTime == null">
                AND n.publish_time &gt;= #{publishBeginTime}
            </if>
            <if test="updateBeginTime != null and updateEndTime != null">
                AND n.update_time &gt;= #{updateBeginTime} AND n.update_time &lt;= #{publishEndTime}
            </if>
            <if test="(updateBeginTime == null ) and updateEndTime != null ">
                AND n.update_time &lt;= #{publishEndTime}
            </if>
            <if test="updateBeginTime != null and updateEndTime == null">
                AND n.update_time &gt;= #{updateBeginTime}
            </if>
            <if test="username != null and ! &quot;&quot;.equals(username)">
                <bind name="myUsername" value="'%' + username  + '%'"/>
                AND u.username like #{myUsername}
            </if>
        </where>
    </select>

    <update id="updateNotice">
        UPDATE notice
        <set>
            <if test="notice.title != null and ! &quot;&quot;.equals(notice.title)">
                title = #{notice.title},
            </if>
            <if test="notice.content != null and ! &quot;&quot;.equals(notice.content)">
                content = #{notice.content},
            </if>
        </set>
        where id = #{notice.id}
    </update>

    <insert id="addNotice">
        INSERT INTO notice(title, content, type, author_id, available, createtime, update_time)
        VALUES (#{notice.title}, #{notice.content}, #{notice.type}, #{notice.authorId}, #{notice.available},
                #{notice.createtime}, #{notice.updateTime})
    </insert>

    <delete id="deleteAdminNotice">
        DELETE
        FROM notice
        WHERE id = #{notice.id}
    </delete>

    <update id="publishNotice">
        UPDATE notice
        <set>
            available = 1,
            publish_time = #{notice.publishTime}
        </set>
        <where>
            id = #{notice.id}
        </where>
    </update>

    <update id="cancelNotice">
        UPDATE notice
        <set>
            available = 0,
            publish_time = null
        </set>
        <where>
            id = #{notice.id}
        </where>
    </update>

    <select id="getAdminNoticeById" resultMap="noticeVoMap">
        SELECT n.id,
               n.title,
               n.content,
               n.author_id,
               n.publish_time,
               IFNULL(b.n_id, 0) AS STATUS
        FROM notice n
                 LEFT JOIN (SELECT c.n_id FROM notice_confirm AS c WHERE c.u_id = #{uId}) AS b ON b.n_id = n.id
        WHERE n.available = 1
          AND n.type = 'adminUsers'
        ORDER BY n.publish_time DESC
    </select>

    <delete id="deleteRelationToNotice">
        DELETE
        FROM notice_confirm
        WHERE n_id = #{notice.id}
    </delete>

    <insert id="confirmAdminNotice">
        INSERT INTO notice_confirm(n_id, u_id, confirm_time)
        VALUES (#{nId}, #{uId}, NOW())
    </insert>

</mapper>